ggplot(data=diamonds, aes(x=x,y=price))+
geom_point()+
xlim(3,11)
?alpha
ggplot(data=diamonds, aes(x=x,y=price))+
geom_point(alpha=1/20)+
xlim(3,11)+
scale_x_continuous(breaks=seq(3,11,0.5))
?scale_x_continuous
ggplot(data=diamonds, aes(x=x,y=price))+
geom_point(alpha=1/20)+
scale_x_continuous(breaks=seq(3,11,0.5), limits=c(3,11))
ggplot(data=diamonds, aes(x=x,y=price))+
geom_point(alpha=1/20)+
scale_x_continuous(breaks=seq(3.5,11,0.5), limits=c(3.5,11))+
scale_y_continuous(breaks=seq(0,20000,1000))
cor.test(diamonds$price,diamonds$x)
cor.test(diamonds$price,diamonds$y)
cor.test(diamonds$price,diamonds$z)
View(diamonds)
ggplot(data=diamonds, aes(x=depth,y=price))+
geom_point()
range(diamonds$depth)
ggplot(data = diamonds, aes(x = depth, y = price)) +
geom_point(alpha=1/100)+
scale_x_continuous(breaks=seq(42,80,2))
cor.test(diamonds$price,diamonds$depth)
?quantiles
?quantile
ggplot(data = subset(diamonds,price <= quantile(price,0.99) & carat <= quantile(carat,0.99)), aes(x = price, y = carat))+
geom_point()
ggplot(data = subset(diamonds,price <= quantile(price,0.99) & carat <= quantile(carat,0.99)), aes(x = carat, y = price))+
geom_point()
library(ggplot2)
data('diamonds')
?diamonds
diamonds$volume <- diamonds$x * diamonds$y * diamonds$y
View(diamonds)
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
View(diamonds)
ggplot(data = diamonds, aes(x = volume, y = price))+
geom_points()
ggplot(data = diamonds, aes(x = volume, y = price))+
geom_point()
cor.test(diamonds$price,subset(diamonds,volume == 0 | volume >= 800)$volume)
cor.test(subset(diamonds,volume == 0 | volume >= 800)$price,subset(diamonds,volume == 0 | volume >= 800)$volume)
dia.noout <- subset(diamonds,volume == 0 | volume >= 800)
cor.test(dia.noout$price, dia.noout$volume)
r(dia.noout)
rm(dia.noout)
cor.test(subset(diamonds,volume > 0 & volume < 800)$price,subset(diamonds,volume > 0 | volume < 800)$volume)
cor.test(subset(diamonds,volume > 0 & volume < 800)$price,subset(diamonds,volume > 0 & volume < 800)$volume)
dia.noout <- subset(diamonds,volume > 0 & volume <800)
ggplot(data = dia.noout, aes(x = volume, y = price))+
geom_point(alpha=1/20)
?stat+smooth
?stat_smooth
ggplot(data = dia.noout, aes(x = volume, y = price))+
geom_point(alpha=1/20)+
stat_smooth(method = 'lm')
library(dplyr)
?summarise
?min
?arrange
diamondsByClarity <- group_by(diamonds,clarity)
diamondsByClarity <- arrange(diamondsByClarity,clarity)
diamondsByClarity <- summarise(diamondsByClarity, mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
View(diamondsByClarity)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
library(gridExtra)
?grid.arrange
p1 = ggplot(data=diamonds_by_clarity, aes(x = clarity, y = mean_price))+
geom_bar()
p2 = ggplot(data=diamonds_by_color, aes(x = color, y = mean_price))+
geom_bar()
grid.arrange(p1,p2)
p1 = ggplot(data=diamonds_mp_by_clarity, aes(x = clarity, y = mean_price))+
geom_bar()
p2 = ggplot(data=diamonds_mp_by_color, aes(x = color, y = mean_price))+
geom_bar()
grid.arrange(p1,p2)
?diamonds
rm(all)
?rm
getwd()
x <- 1:4
y <- 2:3
x + y
getwd()
ls
ls()
dir()
x <- read.csv("hw1_data.csv")
x
names(x)
x(1:2)
head(x)
rowes(x)
number.rowes(x)
?rowes
??rowes
??rows
nrow(x)
x[1:2]
x[,1:2]
x(1)
rows(x,1:2)
head(x,2)
?tail
tail(x,2)
row(x,47)
clear
clear()
clear()
View(x)
y <- x("Ozone"=NA)
y <- x["Ozone"=NA]
y <- x["Ozone"="NA"]
y <- subset(x,Ozone="NA")
y <- subset(x,Ozone && "NA")
y <- subset(x,Ozone && NA)
y <- subset(x,is.NA(Ozone))
?is.na
y <- subset(x,is.na(Ozone))
y
nrow(y)
z <- subset(x,!is.na(Ozone))
mean(z,Ozone)
?mean
mean(z)
View(z)
?summary
summary(z)
a <- subset(x,Ozone > 31 && Temp >90)
summary(a)
View(a)
View(x)
a <- subset(x,Ozone > 31 & Temp > 90)
summary(a)
b <- subset(x,Month = 6)
b <- subset(x,Month == 6)
View(b)
summary(b)
b <- subset(x,Month == 5)
summary(b)
onstall.packages(SoDA)
install.packages(SoDA)
install.packages("SoDA")
library(SoDA)
SoDA
library("SoDA")
SoDA
help.strat()
help.start()
read.csv
read.table
na.rm
na
na.rm?
na.rm?
q
na.rm?
q
na?
q
mean
means
mean?
q
?mean
mean
usemethod
UseMethod
getwd()
dir()
cd datasciencecoursera
cd ./Movies
cd
?cd
?setwd
setwd('/datasciencecoursera')
setwd(/datasciencecoursera)
setwd(datasciencecoursera)
setwd(datasciencecoursera)
setwd("datasciencecoursera")
dir
dir()
read.csv("specdata/001.csv")
file <- read.csv("specdata/001.csv")
head(file)
file <- read.csv("specdata/1.csv")
head(file)
for (s in 2:3){
s
}
for (s in 2:3){
s
}
s <- c(2,3)
s
a <- numeric()
for (s in 2:3){
a <- c(a,s)
}
a
?paste
?read.csv
View(file)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## an empty vector for results
data <- numeric()
## a loop for the amount of id's
for (i in id) {
## file name string
file_name <- character()
## expand id to 3 chars if needed
if (i < 10){
file_name <- paste("00",i)
} else if (i < 100) {
file_name <- paste("0",i)
} else{
file_name <- as.character(i)
}
file_name <- paste(directory,"/",file_name,".csv")
## read the file
content <- read.csv(file_name)
## add values for the specifie variable to the results vector
data <- c(data,content[,pollutantt])
}
## after the loop, calculate the mean
mean (data, na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## an empty vector for results
data <- numeric()
## a loop for the amount of id's
for (i in id) {
## file name string
file_name <- character()
## expand id to 3 chars if needed
if (i < 10){
file_name <- paste("00",i, sep = "")
} else if (i < 100) {
file_name <- paste("0",i, sep = "")
} else{
file_name <- as.character(i)
}
file_name <- paste(directory,"/",file_name,".csv", sep = "")
## read the file
content <- read.csv(file_name)
## add values for the specifie variable to the results vector
data <- c(data,content[,pollutantt])
}
## after the loop, calculate the mean
mean (data, na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## an empty vector for results
data <- numeric()
## a loop for the amount of id's
for (i in id) {
## file name string
file_name <- character()
## expand id to 3 chars if needed
if (i < 10){
file_name <- paste("00",i, sep = "")
} else if (i < 100) {
file_name <- paste("0",i, sep = "")
} else{
file_name <- as.character(i)
}
file_name <- paste(directory,"/",file_name,".csv", sep = "")
## read the file
content <- read.csv(file_name)
## add values for the specifie variable to the results vector
data <- c(data,content[,pollutant])
}
## after the loop, calculate the mean
mean (data, na.rm = TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
?mean
?data.frame
?rbind
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
## an empty data frame for results
df <- data.frame(id=numeric(), nobs = numeric())
## a loop for the amount of id's
for (i in id) {
## file name string
file_name <- character()
## expand id to 3 chars if needed
if (i < 10){
file_name <- paste("00",i, sep = "")
} else if (i < 100) {
file_name <- paste("0",i, sep = "")
} else{
file_name <- as.character(i)
}
file_name <- paste(directory,"/",file_name,".csv", sep = "")
## read the file
content <- read.csv(file_name)
## add row with name of file and nobs to df
df <- rbind (i, sum(complete.cases(content)))
}
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
## an empty data frame for results
df <- data.frame(id=numeric(), nobs = numeric())
## a loop for the amount of id's
for (i in id) {
## file name string
file_name <- character()
## expand id to 3 chars if needed
if (i < 10){
file_name <- paste("00",i, sep = "")
} else if (i < 100) {
file_name <- paste("0",i, sep = "")
} else{
file_name <- as.character(i)
}
file_name <- paste(directory,"/",file_name,".csv", sep = "")
## read the file
content <- read.csv(file_name)
## add row with name of file and nobs to df
df <- rbind (i, sum(complete.cases(content)))
}
##return the data frame
df
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
## an empty data frame for results
df <- data.frame (matrix(ncols = 2, nrows = length(id)))
colnames(df) <- c("id", "nobs")
rownr <- 1
## a loop for the amount of id's
for (i in id) {
## file name string
file_name <- character()
## expand id to 3 chars if needed
if (i < 10){
file_name <- paste("00",i, sep = "")
} else if (i < 100) {
file_name <- paste("0",i, sep = "")
} else{
file_name <- as.character(i)
}
file_name <- paste(directory,"/",file_name,".csv", sep = "")
## read the file
content <- read.csv(file_name)
## add row with name of file and nobs to df
df[rownr, ] <- c(i, sum(complete.cases(content)))
rownr <- rownr + 1
}
##return the data frame
df
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
## an empty data frame for results
df <- data.frame (matrix(, ncols = 2, nrows = length(id)))
colnames(df) <- c("id", "nobs")
rownr <- 1
## a loop for the amount of id's
for (i in id) {
## file name string
file_name <- character()
## expand id to 3 chars if needed
if (i < 10){
file_name <- paste("00",i, sep = "")
} else if (i < 100) {
file_name <- paste("0",i, sep = "")
} else{
file_name <- as.character(i)
}
file_name <- paste(directory,"/",file_name,".csv", sep = "")
## read the file
content <- read.csv(file_name)
## add row with name of file and nobs to df
df[rownr, ] <- c(i, sum(complete.cases(content)))
rownr <- rownr + 1
}
##return the data frame
df
}
complete("specdata", c(2, 4, 8, 10, 12))
?matrix
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
## an empty data frame for results
df <- data.frame (matrix(ncol = 2, nrow = length(id)))
colnames(df) <- c("id", "nobs")
rownr <- 1
## a loop for the amount of id's
for (i in id) {
## file name string
file_name <- character()
## expand id to 3 chars if needed
if (i < 10){
file_name <- paste("00",i, sep = "")
} else if (i < 100) {
file_name <- paste("0",i, sep = "")
} else{
file_name <- as.character(i)
}
file_name <- paste(directory,"/",file_name,".csv", sep = "")
## read the file
content <- read.csv(file_name)
## add row with name of file and nobs to df
df[rownr, ] <- c(i, sum(complete.cases(content)))
rownr <- rownr + 1
}
##return the data frame
df
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
